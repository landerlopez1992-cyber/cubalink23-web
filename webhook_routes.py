#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Webhooks de Square para Cubalink23
Maneja notificaciones autom√°ticas de Square sobre cambios en pagos
"""

from flask import Blueprint, request, jsonify
import json
import hmac
import hashlib
import os
from datetime import datetime

webhook_bp = Blueprint('webhook', __name__, url_prefix='/webhooks')

# Clave secreta del webhook (configurar en Square Dashboard)
WEBHOOK_SECRET = os.environ.get('SQUARE_WEBHOOK_SECRET', '')

@webhook_bp.route('/square', methods=['POST'])
def handle_square_webhook():
    """Manejar webhooks de Square"""
    try:
        # Verificar la firma del webhook
        if not verify_webhook_signature(request):
            return jsonify({'error': 'Signature verification failed'}), 401
        
        # Obtener datos del webhook
        webhook_data = request.get_json()
        event_type = webhook_data.get('type')
        
        print(f"üîî Webhook recibido: {event_type}")
        print(f"üìù Datos: {webhook_data}")
        
        # Procesar seg√∫n el tipo de evento
        if event_type == 'payment.created':
            return handle_payment_created(webhook_data)
        elif event_type == 'payment.updated':
            return handle_payment_updated(webhook_data)
        elif event_type == 'refund.created':
            return handle_refund_created(webhook_data)
        elif event_type == 'refund.updated':
            return handle_refund_updated(webhook_data)
        else:
            print(f"‚ö†Ô∏è Evento no manejado: {event_type}")
            return jsonify({'status': 'ignored'}), 200
            
    except Exception as e:
        print(f"‚ùå Error procesando webhook: {e}")
        return jsonify({'error': str(e)}), 500

def verify_webhook_signature(request):
    """Verificar la firma del webhook de Square"""
    if not WEBHOOK_SECRET:
        print("‚ö†Ô∏è SQUARE_WEBHOOK_SECRET no configurado, saltando verificaci√≥n")
        return True
    
    try:
        # Obtener la firma del header
        signature = request.headers.get('X-Square-Signature')
        if not signature:
            return False
        
        # Construir el payload para verificaci√≥n
        body = request.get_data()
        url = request.url
        
        # Crear el string a verificar
        string_to_sign = url + body.decode('utf-8')
        
        # Calcular la firma esperada
        expected_signature = hmac.new(
            WEBHOOK_SECRET.encode('utf-8'),
            string_to_sign.encode('utf-8'),
            hashlib.sha256
        ).digest()
        
        # Comparar firmas
        return hmac.compare_digest(signature.encode('utf-8'), expected_signature)
        
    except Exception as e:
        print(f"‚ùå Error verificando firma: {e}")
        return False

def handle_payment_created(webhook_data):
    """Manejar evento de pago creado"""
    try:
        payment = webhook_data.get('data', {}).get('object', {}).get('payment', {})
        payment_id = payment.get('id')
        amount = payment.get('amount_money', {}).get('amount', 0) / 100
        status = payment.get('status')
        
        print(f"üí∞ Pago creado: {payment_id} - ${amount} - {status}")
        
        # Aqu√≠ podr√≠as actualizar tu base de datos local
        # update_payment_status(payment_id, status, amount)
        
        return jsonify({'status': 'processed'}), 200
        
    except Exception as e:
        print(f"‚ùå Error procesando payment.created: {e}")
        return jsonify({'error': str(e)}), 500

def handle_payment_updated(webhook_data):
    """Manejar evento de pago actualizado"""
    try:
        payment = webhook_data.get('data', {}).get('object', {}).get('payment', {})
        payment_id = payment.get('id')
        status = payment.get('status')
        
        print(f"üîÑ Pago actualizado: {payment_id} - {status}")
        
        # Actualizar estado en base de datos
        # update_payment_status(payment_id, status)
        
        # Si el pago fue completado, procesar l√≥gica de negocio
        if status == 'COMPLETED':
            print(f"‚úÖ Pago completado: {payment_id}")
            # process_completed_payment(payment_id)
        elif status == 'FAILED':
            print(f"‚ùå Pago fall√≥: {payment_id}")
            # process_failed_payment(payment_id)
        
        return jsonify({'status': 'processed'}), 200
        
    except Exception as e:
        print(f"‚ùå Error procesando payment.updated: {e}")
        return jsonify({'error': str(e)}), 500

def handle_refund_created(webhook_data):
    """Manejar evento de reembolso creado"""
    try:
        refund = webhook_data.get('data', {}).get('object', {}).get('refund', {})
        refund_id = refund.get('id')
        payment_id = refund.get('payment_id')
        amount = refund.get('amount_money', {}).get('amount', 0) / 100
        
        print(f"üí∏ Reembolso creado: {refund_id} para pago {payment_id} - ${amount}")
        
        # Actualizar base de datos con informaci√≥n del reembolso
        # create_refund_record(refund_id, payment_id, amount)
        
        return jsonify({'status': 'processed'}), 200
        
    except Exception as e:
        print(f"‚ùå Error procesando refund.created: {e}")
        return jsonify({'error': str(e)}), 500

def handle_refund_updated(webhook_data):
    """Manejar evento de reembolso actualizado"""
    try:
        refund = webhook_data.get('data', {}).get('object', {}).get('refund', {})
        refund_id = refund.get('id')
        status = refund.get('status')
        
        print(f"üîÑ Reembolso actualizado: {refund_id} - {status}")
        
        # Actualizar estado del reembolso
        # update_refund_status(refund_id, status)
        
        return jsonify({'status': 'processed'}), 200
        
    except Exception as e:
        print(f"‚ùå Error procesando refund.updated: {e}")
        return jsonify({'error': str(e)}), 500

# Funciones helper para base de datos (implementar seg√∫n tu sistema)
def update_payment_status(payment_id, status, amount=None):
    """Actualizar estado de pago en base de datos"""
    # TODO: Implementar seg√∫n tu sistema de base de datos
    pass

def process_completed_payment(payment_id):
    """Procesar l√≥gica cuando un pago se completa"""
    # TODO: Implementar l√≥gica de negocio
    # - Actualizar saldo del usuario
    # - Enviar notificaci√≥n
    # - Generar recibo
    pass

def process_failed_payment(payment_id):
    """Procesar l√≥gica cuando un pago falla"""
    # TODO: Implementar l√≥gica de negocio
    # - Notificar al usuario
    # - Revertir cambios si es necesario
    pass

def create_refund_record(refund_id, payment_id, amount):
    """Crear registro de reembolso en base de datos"""
    # TODO: Implementar seg√∫n tu sistema
    pass

def update_refund_status(refund_id, status):
    """Actualizar estado de reembolso"""
    # TODO: Implementar seg√∫n tu sistema
    pass




